<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>新年快乐</title>
    <link href="/2024/02/09/%E9%BE%99%E5%B9%B4%E5%BF%AB%E4%B9%90/"/>
    <url>/2024/02/09/%E9%BE%99%E5%B9%B4%E5%BF%AB%E4%B9%90/</url>
    
    <content type="html"><![CDATA[<h1 id="2024，龙年快乐"><a href="#2024，龙年快乐" class="headerlink" title="2024，龙年快乐"></a>2024，龙年快乐</h1><p>在这个充满传统文化和祥和气息的中国农历龙年里，愿你在生活中如同龙般威武庄严，充满智慧和力量。愿你在新的一年里展翅飞翔，驾驭风云，创造自己的辉煌，祝福你在龙年里蒸蒸日上，万事如意！祝龙年吉祥，万事顺利！</p>]]></content>
    
    
    
    <tags>
      
      <tag>新年祝福</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新年快乐</title>
    <link href="/2024/01/01/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/"/>
    <url>/2024/01/01/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/</url>
    
    <content type="html"><![CDATA[<h1 id="海压竹枝底复举，风吹山角晦还明"><a href="#海压竹枝底复举，风吹山角晦还明" class="headerlink" title="海压竹枝底复举，风吹山角晦还明"></a>海压竹枝底复举，风吹山角晦还明</h1><p>又一年四季轮回！</p><p>友友们，新年快乐，平安健康！</p>]]></content>
    
    
    
    <tags>
      
      <tag>新年快乐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python组合数据类型</title>
    <link href="/2023/12/14/Python%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2023/12/14/Python%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Python组合数据类型"><a href="#Python组合数据类型" class="headerlink" title="Python组合数据类型"></a>Python组合数据类型</h1><h2 id="序列和索引"><a href="#序列和索引" class="headerlink" title="序列和索引"></a>序列和索引</h2><p>序列是一个用于存储多个值的连续空间，每个值都对应一个整数编号，称为索引。索引分为正向递增索引与反向递减索引</p><p>切片操作的语法结构：</p><p>序列[start: end: step], start为切片开始的索引(包含)，end为切片结束的索引(不包含)，step为步长(默认为1)。省略开始位置则默认从0开始，省略结束位置则默认到序列的最后一个元素（包含最后一个）</p><h3 id="序列的相关操作"><a href="#序列的相关操作" class="headerlink" title="序列的相关操作"></a>序列的相关操作</h3><table><thead><tr><th align="center">操作符&#x2F;函数</th><th align="center">描述说明</th></tr></thead><tbody><tr><td align="center">x in s</td><td align="center">如果x是s的元素，结果为True，否则结果为False</td></tr><tr><td align="center">x not in s</td><td align="center">如果x不是s的元素，结果为True，否则结果为False</td></tr><tr><td align="center">len(s)</td><td align="center">序列s中的元素的个数</td></tr><tr><td align="center">max(s)</td><td align="center">序列s中元素的最大值</td></tr><tr><td align="center">min(s)</td><td align="center">序列s中元素的最小值</td></tr><tr><td align="center">s.index(x)</td><td align="center">序列s中元素x第一次出现的位置</td></tr><tr><td align="center">s.count(x)</td><td align="center">序列s中元素x出现的总次数</td></tr></tbody></table><h2 id="列表类型"><a href="#列表类型" class="headerlink" title="列表类型"></a>列表类型</h2><p>列表的定义：</p><p>1.是指一系列的按特定顺序排列的元素组成</p><p>2.是Python中内置的<strong>可变序列</strong></p><p>3.在Python中使用[]定义列表，元素与元素之间使用英文逗号分隔</p><p>4.列表中的元素可以是任意的数据类型</p><p>列表的创建方式有两种，一是使用[]直接创建列表，二是使用内置函数list()创建列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>列表名=[element1,element2,...elementN]<br><span class="hljs-number">2.</span>列表名=<span class="hljs-built_in">list</span>(序列)<br><span class="hljs-number">3.</span>列表的删除 <span class="hljs-keyword">del</span> 列表名<br></code></pre></td></tr></table></figure><p>enumerate函数的使用语法结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> index,item <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-built_in">list</span>):<span class="hljs-comment">#index是序号不是索引值，可以单独设置(list,start=n)</span><br>    <span class="hljs-built_in">print</span>(index,item)<br></code></pre></td></tr></table></figure><h3 id="列表的相关操作方法"><a href="#列表的相关操作方法" class="headerlink" title="列表的相关操作方法"></a>列表的相关操作方法</h3><table><thead><tr><th align="center">列表的方法</th><th align="center">描述说明</th></tr></thead><tbody><tr><td align="center">list.append(x)</td><td align="center">在列表list最后增加一个元素</td></tr><tr><td align="center">list.insert(index,x)</td><td align="center">在列表list的index位插入一个元素</td></tr><tr><td align="center">list.clear()</td><td align="center">清除列表list内的所有元素</td></tr><tr><td align="center">list.pop(index)</td><td align="center">将列表list中第index位的元素取出，并在列表中删除</td></tr><tr><td align="center">list.remove(x)</td><td align="center">将列表list中出现的第一个元素x删除</td></tr><tr><td align="center">list.reverse(x)</td><td align="center">将列表list中的所有元素反转</td></tr><tr><td align="center">list.copy()</td><td align="center">拷贝列表中的所有元素，生成一个新的列表</td></tr></tbody></table><p>列表的排序方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>.sort(key=<span class="hljs-literal">None</span>,reverse=<span class="hljs-literal">False</span>)<span class="hljs-comment">#其中key表示排序的规则，reverse表示排序方式，默认为false，表示升序</span><br><span class="hljs-comment">############</span><br><span class="hljs-built_in">sorted</span>(iterable,key=<span class="hljs-literal">None</span>,reverse=<span class="hljs-literal">False</span>)<span class="hljs-comment">#iterable表示排序的对象</span><br></code></pre></td></tr></table></figure><p>列表生成式的语法结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>=[expression <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>]<br><span class="hljs-comment">####################</span><br><span class="hljs-built_in">list</span>=[expression <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> rang <span class="hljs-keyword">if</span> condition]<br></code></pre></td></tr></table></figure><p>二维列表：表格数据</p><p>二维列表的遍历：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-keyword">for</span> <span class="hljs-built_in">row</span> <span class="hljs-keyword">in</span> 二维列表:<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">row</span>:<br>pass<br></code></pre></td></tr></table></figure><h1 id="元组类型"><a href="#元组类型" class="headerlink" title="元组类型"></a>元组类型</h1><p>元组的定义：</p><p>1.是Python中内置的不可变序列</p><p>2.在Python中使用()定义元组，元素与元素之间使用英文逗号分隔</p><p>3.元组中只有一个元素时逗号也不能省略</p><p>元组的创建方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">元组名=(element1,element2...elementN)<span class="hljs-comment">#使用()直接创建元组</span><br><span class="hljs-comment">###############</span><br>元组名=<span class="hljs-built_in">tuple</span>(序列)<span class="hljs-comment">#使用内置函数创建元组</span><br><span class="hljs-comment">###########</span><br><span class="hljs-keyword">del</span> 元组名<span class="hljs-comment">#删除元组</span><br></code></pre></td></tr></table></figure><h3 id="元组与列表的区别"><a href="#元组与列表的区别" class="headerlink" title="元组与列表的区别"></a>元组与列表的区别</h3><table><thead><tr><th align="center">元组</th><th align="center">列表</th></tr></thead><tbody><tr><td align="center">不可变序列</td><td align="center">可变序列</td></tr><tr><td align="center">无法实现添加、删除和修改元素等操作</td><td align="center">append()、insert()、remove()、pop()、等方法实现添加和删除列表元素</td></tr><tr><td align="center">支持切片访问元素、不支持修改操作</td><td align="center">支持切片访问和修改列表中的元素</td></tr><tr><td align="center">访问和处理速度快</td><td align="center">访问和处理速度慢</td></tr><tr><td align="center">可以作为字典的键</td><td align="center">不能作为字典的键</td></tr></tbody></table><h1 id="字典类型"><a href="#字典类型" class="headerlink" title="字典类型"></a>字典类型</h1><p>字典类型的定义：</p><p>1.根据一个信息查找另外一个信息的方式构成了”键值对“，它表示索引用的键和对应的值构成的成对关系</p><p>2.它也是可变数据类型，并且是无序的</p><p>3.字典的键必须是不可变数据类型</p><p>4.字典中键必须唯一，但是值可以重复</p><p>字典的创建方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">d=&#123;key1:value1,key2:value2.....&#125;<span class="hljs-comment">#使用&#123;&#125;直接创建字典</span><br><span class="hljs-comment">##################</span><br><span class="hljs-built_in">zip</span>(list1,list2)<span class="hljs-comment">#通过映射函数创建字典</span><br><span class="hljs-comment">#############</span><br><span class="hljs-built_in">dict</span>(key1:value1,key2:value2..........)<span class="hljs-comment">#使用内置函数dict创建字典</span><br></code></pre></td></tr></table></figure><p><strong>注意！</strong></p><p>字典中的key是无序的，Python3.5及其之前版本的字典的key在输出时无序，但是在Python版本3.6之后Python解释器进行了处理，所以会出现输出的顺序与添加的顺序”一致”</p><p>字典元素的取值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">d[key]或d.get(key)<br></code></pre></td></tr></table></figure><p>字典元素的遍历：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> d.items():<span class="hljs-comment">#遍历出key与value的元组</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-comment">#########################</span><br><span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> d.items():<span class="hljs-comment">#分别遍历出key和value</span><br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h2 id="字典的相关操作方法"><a href="#字典的相关操作方法" class="headerlink" title="字典的相关操作方法"></a>字典的相关操作方法</h2><table><thead><tr><th align="center">字典的方法</th><th align="center">描述说明</th></tr></thead><tbody><tr><td align="center">d.keys()</td><td align="center">获取所有的key数据</td></tr><tr><td align="center">d.values()</td><td align="center">获取所有的value数据</td></tr><tr><td align="center">d.pop(key.default)</td><td align="center">key存在获取相应的value,同时删除key_value对，否则获取默认值</td></tr><tr><td align="center">d.popitem()</td><td align="center">随机从字典中取出一个key-value对，结果为元组类型，同时将该key-value从字典中删除</td></tr><tr><td align="center">d.clear()</td><td align="center">清空字典中所有的key-value对</td></tr></tbody></table><p>字典生成式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">d=&#123;key:value <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>&#125;<br><span class="hljs-comment">###############################</span><br>d=&#123;key:value <span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(list1,list2)&#125;<br></code></pre></td></tr></table></figure><h1 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h1><p>集合的定义：</p><p>1.Python中的集合与数学中集合的概念一致</p><p>2.Python中的集合是一个无序的不重复元素序列</p><p>3.集合中只能存储不可变数据类型</p><p>4.在Python中集合使用{}定义</p><p>5.与列表、字典一样，都是Python中的可变数据类型</p><p>集合的创建方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s=&#123;element1,element2.....elementN&#125;直接使用&#123;&#125;创捷集合<br><span class="hljs-comment">###############################</span><br>s=<span class="hljs-built_in">set</span>(可迭代对象)<span class="hljs-comment">#使用内置函数set()创建集合</span><br><span class="hljs-comment">##################</span><br><span class="hljs-keyword">del</span> s<br></code></pre></td></tr></table></figure><p>集合的操作符</p><p>交集(A&amp;B)、并集(A|B)、差集(A-B)、补集(A^B)</p><h3 id="集合的相关操作方法"><a href="#集合的相关操作方法" class="headerlink" title="集合的相关操作方法"></a>集合的相关操作方法</h3><table><thead><tr><th align="center">集合的方法</th><th align="center">描述说明</th></tr></thead><tbody><tr><td align="center">s.add(x)</td><td align="center">如果x不在集合s中，则将x添加到集合s</td></tr><tr><td align="center">s.remove(x)</td><td align="center">如果x在集合中，将其删除，如果不在集合中，程序报错</td></tr><tr><td align="center">s.clear()</td><td align="center">清除集合中所有元素</td></tr></tbody></table><h3 id="列表、元组、字典、集合的区别"><a href="#列表、元组、字典、集合的区别" class="headerlink" title="列表、元组、字典、集合的区别"></a>列表、元组、字典、集合的区别</h3><table><thead><tr><th align="center">数据类型</th><th align="center">序列类型</th><th align="center">元素是否可重复</th><th align="center">是否有序</th><th align="center">定义符号</th></tr></thead><tbody><tr><td align="center">列表list</td><td align="center">可变序列</td><td align="center">可重复</td><td align="center">有序</td><td align="center">[]</td></tr><tr><td align="center">元组tuple</td><td align="center">不可变序列</td><td align="center">可重复</td><td align="center">有序</td><td align="center">()</td></tr><tr><td align="center">字典dict</td><td align="center">可变序列</td><td align="center">key不可重复，value不可重复</td><td align="center">无序</td><td align="center">{key:value}</td></tr><tr><td align="center">集合set</td><td align="center">可变序列</td><td align="center">不可重复</td><td align="center">无序</td><td align="center">{}</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python程序流程控制</title>
    <link href="/2023/12/09/Python%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <url>/2023/12/09/Python%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Python程序流程控制"><a href="#Python程序流程控制" class="headerlink" title="Python程序流程控制"></a>Python程序流程控制</h1><h2 id="程序描述方式"><a href="#程序描述方式" class="headerlink" title="程序描述方式"></a>程序描述方式</h2><p>常用的程序描述方式有三种，分别是自然语言、流程图、伪代码</p><p>自然语言：就是使用人类语言，直接描述程序</p><p>流程图：是用一系列图形、流程线和文字说明描述程序的基本操作和控制流程，主要适用于较短的算法</p><p>伪代码：是介于自然语言和编程语言之间的一种算法描述语言，如果程序比较小可以直接使用代码描述</p><h2 id="程序的组织结构"><a href="#程序的组织结构" class="headerlink" title="程序的组织结构"></a>程序的组织结构</h2><p>程序的组织结构分为：顺序结构、选择&#x2F;分支结构以及循环结构</p><p>顺序结构：按程序语句的自然顺序，从上到下、依次执行每条语句的程序。一般有赋值、输入输出语句等</p><p>选择&#x2F;分支结构：也称为分支结构，是按照条件选择执行不同的代码段。</p><p>单分支结构语句规范：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 表达式<span class="hljs-number">1</span>:<br>语句块<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>双分支结构语句规范：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">if</span> 表达式<span class="hljs-number">1</span>：<br>语句块<span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>语句块<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>多分支结构语句规范：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 表达式<span class="hljs-number">1</span>:<br>    语句块<span class="hljs-number">1</span><br><span class="hljs-keyword">elif</span> 表达式<span class="hljs-number">2</span>:<br>    语句块<span class="hljs-number">2</span><br><span class="hljs-keyword">elif</span> 表达式n:<br>    语句块n<br><span class="hljs-keyword">else</span>:<br>    语句块n+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>单分支结构、双分支结构和多分支结构在实际开发中是可以互相嵌套使用的、内层的分支结构将作为外层的分支结构的语句块使用</p><p>循环结构：</p><p>在Python中循环结构分两类，一类是遍历循环结构for，一类是无限循环结构while</p><p>遍历循环结构for的语句结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> 循环变量 <span class="hljs-keyword">in</span>遍历对象:<br>    语句块<br></code></pre></td></tr></table></figure><p>for…else…结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> 循环变量 <span class="hljs-keyword">in</span> 遍历对象:<br>    语句块<span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>；<br>语句块<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>无限循环while结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 表达式:<br>    语句块<br></code></pre></td></tr></table></figure><p>while…else…结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 表达式:<br>    语句块<span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    语句块<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>while循环的四个步骤：</p><p>1.初始化变量</p><p>2.条件判断</p><p>3.语句块</p><p>4.改变变量</p><p>循环结构也可以互相嵌套，在一个循环结构中嵌套另外一个完整的循环结构就称为嵌套循环</p><h2 id="程序跳转语句"><a href="#程序跳转语句" class="headerlink" title="程序跳转语句"></a>程序跳转语句</h2><p>break程序跳转语句用于跳出循环结构，通常与if一起搭配使用</p><p>break程序跳转语句的语法结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 表达式<span class="hljs-number">1</span>:<br>    执行代码<br>    <span class="hljs-keyword">if</span> 表达式<span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>continue的作用是用于跳过本次循环的后续代码，而继续执行下一次循环操作，continue在循环中通常也是与if一起搭配使用</p><p>continue程序跳转语句的语法结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 表达式<span class="hljs-number">1</span>:<br>    执行代码<br>    <span class="hljs-keyword">if</span> 表达式<span class="hljs-number">2</span>:<br>       <span class="hljs-keyword">continue</span><br><span class="hljs-comment">###################</span><br><span class="hljs-keyword">for</span> 循环变量 <span class="hljs-keyword">in</span> 遍历对象:<br>    执行代码<br>    <span class="hljs-keyword">if</span> 表达式:<br>        <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p>空语句pass</p><p>pass是Python中的保留字，在语法结构中只起到占位符的作用，使语法结构完整，不报错。一般可用在if、for、while、函数的定义、类的定义中</p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python数据类型</title>
    <link href="/2023/12/05/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2023/12/05/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Python数据类型"><a href="#Python数据类型" class="headerlink" title="Python数据类型"></a>Python数据类型</h1><p>1.整数类型：没有小数部分的数值，包含正整数、负整数和零。可以使用十进制、二进制（0b或0B)、八进制(0o或0O)、十六进制(0x或0X）表示</p><p>2.浮点类型：带有小数点的数值，由整数部分和小数部分组成。注意：两个浮点数进行运算时有概率会出现不确定的位数问题，可以使用round保留小数。Python中的复数与数学中的复数形式一致,都由实部和虚部组成。在Python中使用.real表示实部，使用.imag表示虚部</p><p>3.字符串类型：连续的字符序列，可以表示计算机所能识别的一切字符。字符串的界定符：单引号、双引号、三引号。</p><table><thead><tr><th align="center">转义字符</th><th align="center">描述说明</th></tr></thead><tbody><tr><td align="center">\n</td><td align="center">换行符</td></tr><tr><td align="center">\t</td><td align="center">水平制表位，用于横向跳到下一个制表位,一个制表位长度为8</td></tr><tr><td align="center">\“</td><td align="center">双引号</td></tr><tr><td align="center">\‘</td><td align="center">单引号</td></tr><tr><td align="center">\</td><td align="center">一个反斜杠</td></tr></tbody></table><p>字符串又被称为有序的字符序列，对字符串中的某个字符的检索称为索引</p><p>对字符串中某个字串或区间的检索称为切片，切片的语法结构为：字符串或字符串变量[N:M]</p><p>常用的字符串操作</p><table><thead><tr><th>操作符</th><th>描述说明</th></tr></thead><tbody><tr><td>x+y</td><td>将字符串x与y连接起来</td></tr><tr><td>x * n或n * x</td><td>复制n次字符串x</td></tr><tr><td>x in s</td><td>如果x是s的子串，结果为True，否则结果为False</td></tr></tbody></table><p>4.布尔类型：用来表示”真“或者”假“值的数据类型，在Python中使用True或False表示布尔类型的值，True表示整数1，Flase表示整数0。非零的整数的布尔值都为True，所有非空字符串的布尔值也为True。</p><p>布尔值为False的情况如下</p><p>1.False或者是None</p><p>2.数值中的0，包含0.0，虚数0</p><p>3.空序列，包含空格字符串、空元组、空列表、空字典、空集合</p><p>4.自定义对象的实例 该对象的”bool()”方法返回False或”len()”方法返回0</p><h1 id="数据类型的转换"><a href="#数据类型的转换" class="headerlink" title="数据类型的转换"></a>数据类型的转换</h1><table><thead><tr><th align="center">函数</th><th>描述说明</th></tr></thead><tbody><tr><td align="center">int(x)</td><td>将x转换为整数类型</td></tr><tr><td align="center">float(x)</td><td>将x转换为浮点类型</td></tr><tr><td align="center">str(x)</td><td>将x转化为字符串类型</td></tr><tr><td align="center">chr(x)</td><td>将x转换为一个字符</td></tr><tr><td align="center">ord(x)</td><td>将一个字符串x转换为其对应的整数值</td></tr><tr><td align="center">hex(x)</td><td>将一个整数x转换为一个十六进制字符串</td></tr><tr><td align="center">oct(x)</td><td>将一个整数x转换为一个八进制字符串</td></tr><tr><td align="center">bin(x)</td><td>将一个整数x转换为一个二进制字符串</td></tr></tbody></table><h1 id="eval函数"><a href="#eval函数" class="headerlink" title="eval函数"></a>eval函数</h1><p>eval函数：Python当中的一个内置函数，用于去掉字符串最外侧的引号，并按照Python语句方式执行去掉引号的字符串。eval()函数经常与input()函数一起使用</p><p>eval的语法格式：变量&#x3D;eval(字符串)</p><h1 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h1><p>算术运算符：用于处理四则运算的符号</p><table><thead><tr><th align="center">运算符</th><th align="center">描述说明</th><th align="center">示例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加法</td><td align="center">1+1</td><td align="center">2</td></tr><tr><td align="center">-</td><td align="center">减法</td><td align="center">1-1</td><td align="center">0</td></tr><tr><td align="center">*</td><td align="center">乘法</td><td align="center">3*3</td><td align="center">9</td></tr><tr><td align="center">&#x2F;</td><td align="center">除法</td><td align="center">10&#x2F;2</td><td align="center">5</td></tr><tr><td align="center">&#x2F;&#x2F;</td><td align="center">整除</td><td align="center">10&#x2F;&#x2F;3</td><td align="center">3</td></tr><tr><td align="center">%</td><td align="center">取余</td><td align="center">10%3</td><td align="center">1</td></tr><tr><td align="center">**</td><td align="center">幂运算</td><td align="center">2**4</td><td align="center">16</td></tr></tbody></table><p>算术运算符的优先级由高到低为：</p><p>第一级：**</p><p>第二级：* &#x2F; &#x2F;&#x2F; %</p><p>第三级：+  -</p><h1 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h1><table><thead><tr><th align="center">运算符</th><th align="center">描述说明</th><th align="center">示例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">&#x3D;</td><td align="center">简单的赋值运算</td><td align="center">x&#x3D;y</td><td align="center">x&#x3D;y</td></tr><tr><td align="center">+&#x3D;</td><td align="center">加赋值</td><td align="center">x+&#x3D;y</td><td align="center">x&#x3D;x+y</td></tr><tr><td align="center">-&#x3D;</td><td align="center">减赋值</td><td align="center">x-&#x3D;y</td><td align="center">x&#x3D;x-y</td></tr><tr><td align="center">*&#x3D;</td><td align="center">乘赋值</td><td align="center">x*&#x3D;y</td><td align="center">x&#x3D;x*y</td></tr><tr><td align="center">&#x2F;&#x3D;</td><td align="center">除赋值</td><td align="center">x&#x2F;&#x3D;y</td><td align="center">x&#x3D;x&#x2F;y</td></tr><tr><td align="center">%&#x3D;</td><td align="center">取余赋值</td><td align="center">x%&#x3D;y</td><td align="center">x&#x3D;x%y</td></tr><tr><td align="center">**&#x3D;</td><td align="center">幂赋值</td><td align="center">x**&#x3D;y</td><td align="center">x&#x3D;x**y</td></tr><tr><td align="center">&#x2F;&#x2F;&#x3D;</td><td align="center">整除赋值</td><td align="center">x&#x2F;&#x2F;&#x3D;y</td><td align="center">x&#x3D;x&#x2F;&#x2F;y</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Python链式赋值</span><br>a=b=c=<span class="hljs-number">100</span><br><span class="hljs-built_in">print</span>(a,b,c)<br><span class="hljs-comment">#Python系列解包赋值</span><br>a,b=<span class="hljs-number">10</span>,<span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(a,b)<br><span class="hljs-comment">#Python交换两个变量的值</span><br>a,b=b,a<br><span class="hljs-built_in">print</span>(a,b)<br></code></pre></td></tr></table></figure><h1 id="比较运算符-关系运算符"><a href="#比较运算符-关系运算符" class="headerlink" title="比较运算符(关系运算符)"></a>比较运算符(关系运算符)</h1><table><thead><tr><th align="center">运算符</th><th align="center">描述说明</th><th align="center">示例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">&gt;</td><td align="center">大于</td><td align="center">98&gt;90</td><td align="center">True</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td><td align="center">98&lt;90</td><td align="center">False</td></tr><tr><td align="center">&#x3D;&#x3D;</td><td align="center">等于</td><td align="center">98&#x3D;&#x3D;90</td><td align="center">False</td></tr><tr><td align="center">!&#x3D;</td><td align="center">不等于</td><td align="center">98!&#x3D;90</td><td align="center">True</td></tr><tr><td align="center">&gt;&#x3D;</td><td align="center">大于等于</td><td align="center">98&gt;&#x3D;90</td><td align="center">True</td></tr><tr><td align="center">&lt;&#x3D;</td><td align="center">小于等于</td><td align="center">98&lt;&#x3D;90</td><td align="center">False</td></tr></tbody></table><h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><table><thead><tr><th align="center">运算符</th><th align="center">描述说明</th><th align="center">用法</th><th align="center">结合方向</th></tr></thead><tbody><tr><td align="center">and</td><td align="center">逻辑与</td><td align="center">表达式1and表达式2</td><td align="center">从左到右</td></tr><tr><td align="center">or</td><td align="center">逻辑或</td><td align="center">表达式1or表达式2</td><td align="center">从左到右</td></tr><tr><td align="center">not</td><td align="center">逻辑非</td><td align="center">not表达式</td><td align="center">从右到左</td></tr></tbody></table><table><thead><tr><th align="center">表达式1</th><th align="center">表达式2</th><th align="center">表达式1and表达式2</th><th align="center">表达式1or表达式2</th><th align="center">not表达式1</th></tr></thead><tbody><tr><td align="center">True</td><td align="center">True</td><td align="center">True</td><td align="center">True</td><td align="center">False</td></tr><tr><td align="center">True</td><td align="center">False</td><td align="center">False</td><td align="center">True</td><td align="center">False</td></tr><tr><td align="center">False</td><td align="center">False</td><td align="center">False</td><td align="center">False</td><td align="center">True</td></tr><tr><td align="center">False</td><td align="center">True</td><td align="center">False</td><td align="center">True</td><td align="center">True</td></tr></tbody></table><h1 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h1><p>把数字看作二进制数来进行计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#按位与</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;按位与&quot;</span>,<span class="hljs-number">12</span>&amp;<span class="hljs-number">8</span>)<br><span class="hljs-comment">#按位或</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;按位或&quot;</span>,<span class="hljs-number">4</span>|<span class="hljs-number">8</span>)<br><span class="hljs-comment">#按位异或</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;按位异或&quot;</span>,<span class="hljs-number">12</span>^<span class="hljs-number">22</span>)<br><span class="hljs-comment">#按位取反</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;按位取反&quot;</span>,~<span class="hljs-number">8</span>)<br><span class="hljs-comment">#左移位</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;左移位&quot;</span>,<span class="hljs-number">2</span>&lt;&lt;<span class="hljs-number">2</span>)<span class="hljs-comment">#8 表示2向左移动两位相当于2*2*2=8</span><br><span class="hljs-comment">#右移位</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;右移位&quot;</span>,<span class="hljs-number">8</span>&gt;&gt;<span class="hljs-number">2</span>)<span class="hljs-comment">#2 向右移动两位相当于8/2=4 4/2=2</span><br></code></pre></td></tr></table></figure><p>运算符的优先级</p><table><thead><tr><th align="center">运算符</th><th align="center">描述说明</th></tr></thead><tbody><tr><td align="center">**</td><td align="center">幂运算</td></tr><tr><td align="center">~、+、-</td><td align="center">取反、正号、负号</td></tr><tr><td align="center">*、&#x2F;、%、&#x2F;&#x2F;</td><td align="center">算术运算符</td></tr><tr><td align="center">+、-</td><td align="center">算术运算符</td></tr><tr><td align="center">&lt;&lt;、&gt;&gt;</td><td align="center">位运算中的左移位与右移位</td></tr><tr><td align="center">&amp;</td><td align="center">位运算中的按位与</td></tr><tr><td align="center">^</td><td align="center">位运算中的异或</td></tr><tr><td align="center">|</td><td align="center">位运算中的按位或</td></tr><tr><td align="center">&lt;、&lt;&#x3D;、&gt;、&gt;&#x3D;、!&#x3D;、&#x3D;&#x3D;</td><td align="center">比较运算符</td></tr><tr><td align="center">&#x3D;</td><td align="center">赋值运算符</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python语法规范</title>
    <link href="/2023/11/30/Python%E8%AF%AD%E6%B3%95%E8%A7%84%E8%8C%83/"/>
    <url>/2023/11/30/Python%E8%AF%AD%E6%B3%95%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h2 id="Python注释方法"><a href="#Python注释方法" class="headerlink" title="Python注释方法"></a>Python注释方法</h2><p>1.使用#在目标代码行实现单行注释</p><p>2.使用单双引号在代码中实现多行注释</p><p>3.中文文档声明注释</p><h2 id="Python代码缩进"><a href="#Python代码缩进" class="headerlink" title="Python代码缩进"></a>Python代码缩进</h2><p>指每一行语句开始前的空白区域</p><p>用来表示Python程序间的包含和层级关系</p><p>类定义，函数定义，流程控制语句以及异常处理语句等行尾的冒号和下一行的缩进表示一个代码块的开始，而缩进结束，则表示一个代码块的结束</p><p>一般来说4个空格为一个缩进量</p><h2 id="Python保留字与标识符"><a href="#Python保留字与标识符" class="headerlink" title="Python保留字与标识符"></a>Python保留字与标识符</h2><p>保留字：指在Python中被赋予特定意义的一些单词，在开发程序时，不可以把这些保留字作为变量，函数，类，模块和其他对象的名称来使用，保留字严格区分大小写。开发中可以使用keyword这个第三方库查询具体的保留字</p><p>标识符：可以是字符（英文，中文）、下划线和数字，并且第一个字符不能是数字。不能使用Python中的保留字。标识符严格区分大小写。以下划线开头的标识符具有特殊意义，一般应避免使用相似的标识符。通常不建议使用中文作为标识符。</p><p>标识符的命名规范：</p><p>1.模块名尽量短小，并且全部使用小写字母，可以使用下划线分割多个字母 eg: user_infor</p><p>2.包名尽量短小，并且全部使用小写字母，不推荐使用下划线 eg: register.func</p><p>3.类名采用单词首字母大写的形式 eg: MyClass</p><p>4.模块内部的类采用“_”+Pascal风格的类名组成 eg: _InnerMyClass</p><p>5.函数、类的属性和方法的命名，全部使用小写字母，多个字母之间使用下划线分隔</p><p>6.常量命名时采用全部大写字母，可以使用下划线</p><p>7.使用单下划线“_”开头的模块变量或函数是受保护的，在使用”from xxx import xxx”语句从模块中导入时，这些模块变量或函数不能被导入</p><p>8.使用双下划线”__”开头的实例变量或方法是类私有的</p><p>9.以双下划线开头和结尾的是Python的专用标识</p><h2 id="Python变量与常量"><a href="#Python变量与常量" class="headerlink" title="Python变量与常量"></a>Python变量与常量</h2><p>变量的语法结构：变量名&#x3D;value    eg: user&#x3D;jay</p><p>变量的命名规则：</p><p>1.变量名必须是一个有效的标识符</p><p>2.变量名不能使用Python中的保留字</p><p>3.慎用类似O、I等大小写一样的字母</p><p>4.选择有意义的单词作为变量名</p><p>常量的命名规范：全部使用大写字母，一般不建议修改它的值</p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习前言</title>
    <link href="/2023/11/23/Python%E5%AD%A6%E4%B9%A0%E5%89%8D%E8%A8%80/"/>
    <url>/2023/11/23/Python%E5%AD%A6%E4%B9%A0%E5%89%8D%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="程序设计语言"><a href="#程序设计语言" class="headerlink" title="程序设计语言"></a>程序设计语言</h1><p>程序设计语言一般分为三种，分别是：机器语言，汇编语言以及高级语言。</p><p>机器语言：是一种二进制语言 ，能够直接使用二进制代码表达指令，是计算机硬件可以直接识别和执行的程序设计语言</p><p>汇编语言：使用方便记符与机器语言中的指令一一对应</p><p>高级语言：接近自然语言的一种计算机程序设计语言,Python，Java都是高级语言</p><p>采用编译方式运行的语言叫做静态语言，例如Java，采用解释方式运行的语言叫做脚本语言，例如Python，PHP等</p><h1 id="Python语言的特点"><a href="#Python语言的特点" class="headerlink" title="Python语言的特点"></a>Python语言的特点</h1><p>1.编译简单，语法简洁</p><p>2.粘性拓展，开源理念</p><p>3.通用灵活，强制可读</p><p>4.支持中文，模式多样</p><p>5.平台无关，类库丰富</p><h1 id="Python的应用领域"><a href="#Python的应用领域" class="headerlink" title="Python的应用领域"></a>Python的应用领域</h1><p>1.Web开发：Django,Flask,Tornado等后端框架</p><p>2.数据分析与科学计算：Numpy.Pandas,Matplotlib等第三方库</p><p>3.人工智能和机器学习：Tensorflow,PyTorch,Keras等第三方库</p><p>4.自动化测试和运维：Selenium库在自动化测试和运维领域有着举足轻重的作用</p><p>5.网络爬虫游戏开发</p><h1 id="python开发工具"><a href="#python开发工具" class="headerlink" title="python开发工具"></a>python开发工具</h1><p>许多第三方开发工具，例如Pycharm,Anaconda等</p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你听得到</title>
    <link href="/2023/11/20/%E4%BD%A0%E5%90%AC%E5%BE%97%E5%88%B0/"/>
    <url>/2023/11/20/%E4%BD%A0%E5%90%AC%E5%BE%97%E5%88%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="你听得到"><a href="#你听得到" class="headerlink" title="你听得到"></a>你听得到</h1><p>有谁能比我知道</p><p>你的温柔像羽毛</p><p>秘密躺在我怀抱</p><p>只有你能听得到</p><p>还有没有人知道</p><p>你的微笑像拥抱</p><p>多想藏着你的好</p><p>只有我看得到</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
