<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>newpapername</title>
    <link href="/2024/07/23/newpapername/"/>
    <url>/2024/07/23/newpapername/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>新年快乐</title>
    <link href="/2024/02/09/%E9%BE%99%E5%B9%B4%E5%BF%AB%E4%B9%90/"/>
    <url>/2024/02/09/%E9%BE%99%E5%B9%B4%E5%BF%AB%E4%B9%90/</url>
    
    <content type="html"><![CDATA[<h1 id="2024，龙年快乐"><a href="#2024，龙年快乐" class="headerlink" title="2024，龙年快乐"></a>2024，龙年快乐</h1><p>在这个充满传统文化和祥和气息的中国农历龙年里，愿你在生活中如同龙般威武庄严，充满智慧和力量。愿你在新的一年里展翅飞翔，驾驭风云，创造自己的辉煌，祝福你在龙年里蒸蒸日上，万事如意！祝龙年吉祥，万事顺利！</p>]]></content>
    
    
    
    <tags>
      
      <tag>新年祝福</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新年快乐</title>
    <link href="/2024/01/01/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/"/>
    <url>/2024/01/01/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/</url>
    
    <content type="html"><![CDATA[<h1 id="海压竹枝底复举，风吹山角晦还明"><a href="#海压竹枝底复举，风吹山角晦还明" class="headerlink" title="海压竹枝底复举，风吹山角晦还明"></a>海压竹枝底复举，风吹山角晦还明</h1><p>又一年四季轮回！</p><p>友友们，新年快乐，平安健康！</p>]]></content>
    
    
    
    <tags>
      
      <tag>新年快乐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python面向对象程序设计</title>
    <link href="/2023/12/23/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <url>/2023/12/23/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="Python面向对象程序设计"><a href="#Python面向对象程序设计" class="headerlink" title="Python面向对象程序设计"></a>Python面向对象程序设计</h1><h2 id="程序编程的两大编程思想"><a href="#程序编程的两大编程思想" class="headerlink" title="程序编程的两大编程思想"></a>程序编程的两大编程思想</h2><p>面向过程：功能上的封装，典型代表：C语言</p><p>面向对象：属性和行为上的封装，典型代表：Python、Java</p><p>面型对象与面向过程的异同点</p><table><thead><tr><th align="center"></th><th align="center">面向对象</th><th align="center">面向过程</th></tr></thead><tbody><tr><td align="center">区别</td><td align="center">事物比较简单，可以用线性的思维去解决</td><td align="center">事物比较复杂，使用简单的线性思维无法解决</td></tr><tr><td align="center">共同点</td><td align="center">面向过程和面向对象都是解决实际问题的一种思维方式。二者相辅相成，并不是对立的。解决复杂问题，通过面向对象方式便于我们从宏观上把握事物之间复杂的关系，方便我们分析整个系统，具体到微观操作，仍然使用面向过程方式来处理</td><td align="center">同左</td></tr></tbody></table><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><p>类：是由N多个对象抽取出“像“的属性和行为从而归纳总结出来的一种类别</p><p>对象：在Python中一切皆对象</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-meta">#**自定义数据类型的语法结构**</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> 类名():</span><br><span class="hljs-class">pass</span><br><span class="hljs-class">#创建对象的语法格式</span><br><span class="hljs-class">对象名=类名()</span><br></code></pre></td></tr></table></figure><h3 id="类的组成"><a href="#类的组成" class="headerlink" title="类的组成"></a>类的组成</h3><table><thead><tr><th align="center">类属性</th><th>直接定义在类中，方法外的变量</th></tr></thead><tbody><tr><td align="center">实例属性</td><td>定义在 init 方法中，使用self打点的变量</td></tr><tr><td align="center">实例方法</td><td>定义在类中的函数，而且自带参数self</td></tr><tr><td align="center">静态方法</td><td>使用装饰器@staticmethod修饰的方法</td></tr><tr><td align="center">类方法</td><td>使用装饰器@classmethod修饰的方法</td></tr></tbody></table><p><strong>动态绑定属性和方法</strong></p><p>1.每个对象的属性名称相同，但是属性值不同</p><p>2.可以为某个对象绑定独有的属性或方法</p><h2 id="面向对象的三大特征"><a href="#面向对象的三大特征" class="headerlink" title="面向对象的三大特征"></a>面向对象的三大特征</h2><table><thead><tr><th align="center">封装</th><th align="center">继承</th><th align="center">多态</th></tr></thead><tbody><tr><td align="center">隐藏内部细节，对外提供操作方式</td><td align="center">是在函数调用时，使用“形参名称&#x3D;值”的方式进行传参，传递参数顺序可以与定义时参数的顺序不同</td><td align="center">是在函数定义时，直接对形式参数进行赋值，在调用时如果该参数不传值，将使用默认值如果该参数传值，则使用传递的值</td></tr></tbody></table><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a><strong>封装</strong></h3><p><strong>权限控制</strong>：是通过对属性或方法添加单下划线、双下划线以及首尾双下划线来实现</p><p><strong>单下划线开头</strong>:以单下划线开头的属性或方法表示protected，受保护的成员，这类成员被视为仅供内部使用，允许类本身和子类进行访问，但实际上它可以被外部代码访问。<br><strong>双下划线开头</strong>:表示private私有的成员，这类成员只允许定义该属性或方法的类本身进行访问<br><strong>首尾双下划线</strong>:一般表示特殊的方法</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>1.在Python中一个子类可以继承N多个父类<br>2.一个父类也可以拥有N多个子类<br>3.如果一个类没有继承任何类，那么这个类默认继承的是object类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">继承的语法结构:<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">类名</span>(父类<span class="hljs-number">1</span>,父类<span class="hljs-number">2.</span>...父类N):<br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p><strong>方法重写</strong></p><p>1.子类继承了父类就拥有了父类中公有成员和受保护的成员<br>2.父类的方法法并不能完全适合子类的需求，这个时候子类就可以重写父类的方法<br>3.子类在重写父类的方法时，要求方法的名称必须与父类方法的名称相同，在子类重写后的方法中可以通过super0).xxx()调用父类中的方法</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>1.指的就是“多种形态”，即便不知道一个变量所引用的对象到底是什么类型，仍然可以通过这个变量调用对象的方法。<br>2.在程序运行过程中根据变量所引用对象的数据类型，动态决定调用哪个对象中的方法。<br>3.Python语言中的多态，根本不关心对象的数据类型，也不关心类之间是否存在继承关系，只关心对象的行为(方法)。只要不同的类中有同名的方法，即可实现多态</p><p><strong>object类</strong></p><p>1.所有类直接或间接的父类<br>2.所有类都拥有object类的属性和方法</p><table><thead><tr><th><strong>object类</strong>中的特殊方法</th><th align="center">功能描述</th></tr></thead><tbody><tr><td><code>__new__()</code></td><td align="center">由系统调用，用于创建对象</td></tr><tr><td><code>__init__()</code></td><td align="center">创建对象时手动调用，用于初始化对象属性值</td></tr><tr><td><code>__str__()</code></td><td align="center">对象的描述，返回值时str类型，默认输出对象的内存地址</td></tr></tbody></table><p><strong>特殊方法</strong></p><table><thead><tr><th align="center">运算符</th><th align="center">特殊方法</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">+</td><td align="center"><code>__add__()</code></td><td align="center">执行加法运算</td></tr><tr><td align="center">-</td><td align="center"><code>__sub__()</code></td><td align="center">执行减法运算</td></tr><tr><td align="center">&lt;,&lt;&#x3D;,&#x3D;&#x3D;</td><td align="center"><code>__It__()</code>,<code>__le__()</code>,<code>__eq__()</code></td><td align="center">执行比较运算</td></tr><tr><td align="center">&gt;,&gt;&#x3D;,!&#x3D;</td><td align="center"><code>__gt__()</code>,<code>__ge__()</code>,<code>__ne__()</code></td><td align="center">执行比较运算</td></tr><tr><td align="center">*,&#x2F;</td><td align="center"><code>__mul__()</code>,<code>__truediv__()</code></td><td align="center">执行乘法运算，非整除运算</td></tr><tr><td align="center">%,&#x2F;&#x2F;</td><td align="center"><code>__mod__()</code>,<code>__floordiv__()</code></td><td align="center">执行取余运算，整除运算</td></tr><tr><td align="center">**</td><td align="center"><code>__pow__()</code></td><td align="center">执行幂运算</td></tr></tbody></table><p><strong>特殊属性</strong></p><table><thead><tr><th>特殊属性</th><th>功能描述</th></tr></thead><tbody><tr><td><code>obj.__dict__</code></td><td>对象的属性字典</td></tr><tr><td><code>obj.__class__</code></td><td>对象所属的类</td></tr><tr><td><code>class.__bases__</code></td><td>类的父类元组</td></tr><tr><td><code>class.__base__</code></td><td>类的父类</td></tr><tr><td><code>class.__mro__</code></td><td>类的层次结构</td></tr><tr><td><code>class.__subclasses__</code></td><td>类的子类列表</td></tr></tbody></table><h2 id="类的深拷贝与浅拷贝"><a href="#类的深拷贝与浅拷贝" class="headerlink" title="类的深拷贝与浅拷贝"></a>类的深拷贝与浅拷贝</h2><table><thead><tr><th>变量的赋值</th><th>浅拷贝</th><th>深拷贝</th></tr></thead><tbody><tr><td>只是形成两个变量实际上还是指向同一个对象</td><td>拷贝时，对象包含的子对象内容不拷贝，因此源对象与拷贝对象会引用同一个子对象</td><td>使用copy模块的deepcopy函数，递归拷贝对象中包含的子对象源对象和拷贝对象所有的子对象也不相同</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python函数及常用的内置函数</title>
    <link href="/2023/12/21/Python%E5%87%BD%E6%95%B0%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%9A%84%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
    <url>/2023/12/21/Python%E5%87%BD%E6%95%B0%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%9A%84%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Python函数及常用的内置函数"><a href="#Python函数及常用的内置函数" class="headerlink" title="Python函数及常用的内置函数"></a>Python函数及常用的内置函数</h1><p>函数是将一段实现功能的完整代码，使用函数名称进行封装，通过函数名称进行调用。以此达到一次编写，多次调用的目的。</p><p>函数分为以下三种：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">内置函数<br>输出函数<span class="hljs-built_in">print</span>()<br>输入函数input0<br>列表定义函数<span class="hljs-built_in">list</span>()<br><span class="hljs-comment">###############</span><br>自定义函数<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">函数名称</span>(<span class="hljs-params">参数列表</span>):<br>函数体<br>[<span class="hljs-keyword">return</span>返回值列表]<br><span class="hljs-comment">################</span><br>函数调用<br>函数名(参数列表)<br></code></pre></td></tr></table></figure><h2 id="函数的参数传递"><a href="#函数的参数传递" class="headerlink" title="函数的参数传递"></a>函数的参数传递</h2><table><thead><tr><th align="center">位置参数</th><th align="center">关键字参数</th><th align="center">默认值参数</th></tr></thead><tbody><tr><td align="center">是指调用时的参数个数和顺序必须与定义的参数个数和顺序相同</td><td align="center">是在函数调用时，使’形参名称&#x3D;值”的方式进行传参，传递参数顺序可以与定义时参数的顺序不同</td><td align="center">是在函数定义时，直接对形式参数进行赋值，在调用时如果该参数不传值，将使用默认值，如果该参数传值，则使用传递的值</td></tr></tbody></table><p><strong>可变参数：</strong></p><p>又分为个数可变的位置参数和个数可变的关键字参数两种，其中个数可变的位置参数是在参数前加一颗星(*para)，para形式参数的名称，函数调用时可接收任意个数的实际参数，并放到一个元组中。个数可变的关键字参数是在参数前加两颗星(**para)在函数调用时可接收任意多个“参数&#x3D;值”形式的参数，并放到一个字典中。</p><h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><p>1.如果函数的运行结果需要在其它函数中使用，那么这个函数就应该被定义为带返回值的函数<br>2.函数的运行结果使用return关键字进行返回<br>3.return可以出现在函数中的任意一个位置，用于结束函数。<br>4.返回值可以是一个值，或多个值，如果返回的值是多个，结果是一个元组类型</p><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><p>是指变量起作用的范围，根据范围作用的大小可分为局部变量和全局变量</p><table><thead><tr><th align="center">局部变量</th><th align="center">全局变量</th></tr></thead><tbody><tr><td align="center">定义:在函数定义处的参数和函数内部定义的变量<br/>作用范围:仅在函数内部，函数执行结束，局部变量的生命周期也结束</td><td align="center">定义:在函数外定义的变量或函数内部使用global关键字修饰的变量<br/>作用范围:整个程序，程序运行结束，全局变量的生命周期才结束</td></tr></tbody></table><p><strong>匿名函数lambda</strong></p><p>是指没有名字的函数，这种函数只能使用一次，一般是在函数的函数体只有一句代码且只有一个返回值时，可以使用匿名函数来简化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">result=lamdba 参数列表:表达式<br></code></pre></td></tr></table></figure><p><strong>递归函数</strong></p><p>在一个函数的函数体内调用该函数本身，该函数就是递归函数，一个完整的递归操作由两部分组成，一部分是递归调用，一部分是递归终止条件，一般可使用if-else结构来判断递归的调用和递归的终止。</p><h2 id="常用的内置函数"><a href="#常用的内置函数" class="headerlink" title="常用的内置函数"></a>常用的内置函数</h2><p><strong>数据类型转换函数</strong></p><table><thead><tr><th align="center">函数名称</th><th align="center">描述说明</th></tr></thead><tbody><tr><td align="center">bool(obj)</td><td align="center">获取指定对象obj的布尔值</td></tr><tr><td align="center">str(obj)</td><td align="center">将指定对象obj转成字符串类型</td></tr><tr><td align="center">int(x)</td><td align="center">将x转成int类型</td></tr><tr><td align="center">float(x)</td><td align="center">将x转成float类型</td></tr><tr><td align="center">list(sequence)</td><td align="center">将序列转成列表类型</td></tr><tr><td align="center">tuple(sequence)</td><td align="center">将序列转成元组类型</td></tr><tr><td align="center">set(sequence)</td><td align="center">将序列转成集合类型</td></tr></tbody></table><p><strong>常用的数学函数</strong></p><table><thead><tr><th align="center">函数名称</th><th align="center">描述说明</th></tr></thead><tbody><tr><td align="center">abs(x)</td><td align="center">获取x的绝对值</td></tr><tr><td align="center">divmod(x,y)</td><td align="center">获取x与y的商和余数</td></tr><tr><td align="center">max(sequence)</td><td align="center">获取sequence的最大值</td></tr><tr><td align="center">min(sequence)</td><td align="center">获取sequence的最小值</td></tr><tr><td align="center">sum(iter)</td><td align="center">对可迭代对象进行求和运算</td></tr><tr><td align="center">pow(x,y)</td><td align="center">获取x的y次幂</td></tr><tr><td align="center">round(x,d)</td><td align="center">对x进行保留d位小数，结果四舍五入</td></tr></tbody></table><p><strong>常用的迭代器操作函数</strong></p><table><thead><tr><th align="center">函数名称</th><th align="center">描述说明</th></tr></thead><tbody><tr><td align="center">sorted(iter)</td><td align="center">对可迭代对象进行排序</td></tr><tr><td align="center">reversed(sequence)</td><td align="center">反转序列生成新的迭代器对象</td></tr><tr><td align="center">zip(iter1,iter2)</td><td align="center">将iter1与iter2打包成元组并返回一个可迭代的zip对象</td></tr><tr><td align="center">enumerate(iter)</td><td align="center">根据iter对象创建一个enumerate对象</td></tr><tr><td align="center">all(iter)</td><td align="center">判断可迭代对象iter中所有元素的布尔值是否都为True</td></tr><tr><td align="center">any(iter)</td><td align="center">判断可迭代对象iter中所有元素的布尔值是否都为False</td></tr><tr><td align="center">next(iter)</td><td align="center">获取迭代器的下一个元素</td></tr><tr><td align="center">filter(function,iter)</td><td align="center">通过指定条件过滤序列并返回一个迭代器对象</td></tr><tr><td align="center">map(function,iter)</td><td align="center">通过函数function对可迭代对象iter的操作返回一个迭代器对象</td></tr></tbody></table><p><strong>常用的其他内置函数</strong></p><table><thead><tr><th align="center">函数名称</th><th align="center">描述说明</th></tr></thead><tbody><tr><td align="center">format(value,format spec)</td><td align="center">将value以format spec格式进行显示</td></tr><tr><td align="center">len(s)</td><td align="center">获取s的长度或s元素的个数</td></tr><tr><td align="center">id(obj)</td><td align="center">获取对象的内存地址</td></tr><tr><td align="center">type(x)</td><td align="center">获取x的数据类型</td></tr><tr><td align="center">eval(s)</td><td align="center">执s这个字符串所表示的Python代码</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python异常处理</title>
    <link href="/2023/12/17/Python%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <url>/2023/12/17/Python%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Python异常处理"><a href="#Python异常处理" class="headerlink" title="Python异常处理"></a>Python异常处理</h1><p>bug：它指的是检测并排除计算机程序&#x2F;机器中的故障</p><p>Python中的几种异常处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">################No.1</span><br><span class="hljs-keyword">try</span>:<br>    可能会抛出异常的代码块<br><span class="hljs-keyword">except</span> 异常类型:<br>    异常处理代码(报错后的执行代码)<br><span class="hljs-comment">################No.2</span><br><span class="hljs-keyword">try</span>:<br>    可能会抛出异常的代码块<br><span class="hljs-keyword">except</span> 异常类型A:<br>    异常处理代码(报错后的执行代码)<br><span class="hljs-keyword">except</span> 异常类型B:<br>    异常处理代码(报错后的执行代码)<br><span class="hljs-comment">#################No.3</span><br><span class="hljs-keyword">try</span>:<br>    可能会抛出异常的代码块<br><span class="hljs-keyword">except</span> 异常类型A:<br>    异常处理代码(报错后的执行代码)<br><span class="hljs-keyword">else</span>:<br>    没有异常要执行的代码<br><span class="hljs-keyword">finally</span>:<br>    无论是否产生异常都要执行的代码<br><span class="hljs-comment">###############No.4</span><br><span class="hljs-keyword">try</span>:<br>    可能会抛出异常的代码块<br><span class="hljs-keyword">except</span> 异常类型:<br>    异常处理代码(报错后的执行代码)<br><span class="hljs-keyword">else</span>:<br>    没有异常要执行的代码<br></code></pre></td></tr></table></figure><p>raise:抛出一个异常，从而提醒程序出现了异常情况，程序能够正确的处理这些异常情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">raise</span> [Exception类型(异常描述信息)]<br></code></pre></td></tr></table></figure><h2 id="Python中常见的异常类型"><a href="#Python中常见的异常类型" class="headerlink" title="Python中常见的异常类型"></a>Python中常见的异常类型</h2><table><thead><tr><th align="center">异常类型</th><th align="center">描述说明</th></tr></thead><tbody><tr><td align="center">ZeroDivisionError</td><td align="center">当除数为0时，引发的异常</td></tr><tr><td align="center">IndexError</td><td align="center">索引超出范围所引发的异常</td></tr><tr><td align="center">KeyError</td><td align="center">字典取值时key不存在的异常</td></tr><tr><td align="center">NameError</td><td align="center">使用一个没有声明的变量时引发的异常</td></tr><tr><td align="center">SyntaxError</td><td align="center">Python中的语法错误</td></tr><tr><td align="center">ValueError</td><td align="center">传入的值错误</td></tr><tr><td align="center">AttributeError</td><td align="center">属性或方法不存在的异常</td></tr><tr><td align="center">TypeErroe</td><td align="center">类型不合适引发的异常</td></tr><tr><td align="center">IndentationError</td><td align="center">不正确的缩进引发的异常</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python字符串及正则表达式</title>
    <link href="/2023/12/15/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2023/12/15/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Python字符串及正则表达式"><a href="#Python字符串及正则表达式" class="headerlink" title="Python字符串及正则表达式"></a>Python字符串及正则表达式</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串是Python中的不可变数据类型</p><h3 id="字符串的操作方法"><a href="#字符串的操作方法" class="headerlink" title="字符串的操作方法"></a>字符串的操作方法</h3><table><thead><tr><th align="center">方法名</th><th align="center">描述说明</th></tr></thead><tbody><tr><td align="center">str.lower()</td><td align="center">将str字符串全部转换成小写字母，结果为一个新的字符串</td></tr><tr><td align="center">str.upper()</td><td align="center">将str字符串全部转换为大写字母，结果为一个新的字符串</td></tr><tr><td align="center">str.split(sep&#x3D;None)</td><td align="center">将str字符串按照指定的分隔符sep分隔，结果为列表类型</td></tr><tr><td align="center">str.count(sub)</td><td align="center">结果为sub这个字符串在str中出现的次数</td></tr><tr><td align="center">str.find(sub)</td><td align="center">查询sub这个字符串是否在str在存在，如果存在就输出sub首次出现的索引，如果不存在就输出结果为-1</td></tr><tr><td align="center">str.index(sub)</td><td align="center">功能与find相同，区别在于要查询的子串sub不存在时，程序报错</td></tr><tr><td align="center">str.startwith(s)</td><td align="center">查询字符串str是否以s开头</td></tr><tr><td align="center">str.endwith(s)</td><td align="center">查询字符串str是否以s结尾</td></tr><tr><td align="center">str.replace(oid,news)</td><td align="center">使用news替换字符串s中所有的old字符串，结果是一个新的字符串</td></tr><tr><td align="center">str.center(width,fillchar)</td><td align="center">字符串str在指定的宽度范围中居中，可以使用fillchar进行填充</td></tr><tr><td align="center">str.join(iter)</td><td align="center">在iter中的每一个元素的后面都增加一个新的字符串str</td></tr><tr><td align="center">str.strip(chars)</td><td align="center">用chars中列出的字符串，去掉字符串左右边的字符串</td></tr><tr><td align="center">str.lstrip(chars)</td><td align="center">用chars中列出的字符串，去掉字符串左边的字符串</td></tr><tr><td align="center">str.rstrip(chars)</td><td align="center">用chars中列出的字符串，去掉字符串右边的字符串</td></tr></tbody></table><h2 id="格式化字符串的三种方法"><a href="#格式化字符串的三种方法" class="headerlink" title="格式化字符串的三种方法"></a>格式化字符串的三种方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#占位符</span><br>%s:字符串格式<br>%d:十进制数格式<br>%f:浮点数格式<br><span class="hljs-comment">#f-string</span><br>Python3<span class="hljs-number">.6</span>引入的格式化字符串的方法，用&#123;&#125;标明被替换的字符<br><span class="hljs-comment">#str.format()方法</span><br>模板字符串.<span class="hljs-built_in">format</span>(,分隔的参数)<br></code></pre></td></tr></table></figure><h3 id="格式化字符串的详细格式"><a href="#格式化字符串的详细格式" class="headerlink" title="格式化字符串的详细格式"></a>格式化字符串的详细格式</h3><table><thead><tr><th align="center">:</th><th align="center">填充</th><th align="center">对齐方式</th><th align="center">宽度</th><th align="center">,</th><th align="center">.精度</th><th align="center">类型</th></tr></thead><tbody><tr><td align="center">引导符号</td><td align="center">用于填充单个字符</td><td align="center">&lt;左对齐，&gt;右对齐，^居中对齐</td><td align="center">字符串输出的宽度</td><td align="center">数字的千分位精度</td><td align="center">浮点数小数部分的精度或者字符串的最大输出长度</td><td align="center">整数类型：b\d\o\x\X,浮点数类型：e\E\f%</td></tr></tbody></table><h3 id="字符串的解码和编码"><a href="#字符串的解码和编码" class="headerlink" title="字符串的解码和编码"></a>字符串的解码和编码</h3><p>str–&gt;bytes–&gt;str</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#字符串的编码</span><br>将<span class="hljs-built_in">str</span>类型转换为<span class="hljs-built_in">bytes</span>类型<br><span class="hljs-built_in">str</span>.encode(encoding=<span class="hljs-string">&quot;utf-8&quot;</span>,errors=<span class="hljs-string">&quot;strict/ignore/replace&quot;</span>)<br><span class="hljs-comment">#字符串的解码</span><br>将<span class="hljs-built_in">bytes</span>转换为<span class="hljs-built_in">str</span>类型<br><span class="hljs-built_in">bytes</span>.decode(encoding=<span class="hljs-string">&quot;utf-8&quot;</span>,errors=<span class="hljs-string">&quot;strict/ignore/replace&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="数据的验证"><a href="#数据的验证" class="headerlink" title="数据的验证"></a>数据的验证</h2><p>数据的验证是指程序对用户输入数据的合法性进行验证的操作</p><table><thead><tr><th align="center">方法名</th><th align="center">描述说明</th></tr></thead><tbody><tr><td align="center">str.isdigit()</td><td align="center">所有的字符都是数字(阿拉伯数字)</td></tr><tr><td align="center">str.isnumeric()</td><td align="center">所有的字符都是数字</td></tr><tr><td align="center">str.isalpha()</td><td align="center">所有的字符都是字母(包括中文字符)</td></tr><tr><td align="center">str.isalnum()</td><td align="center">所有的字符都是字母或数字(包含中文字符)</td></tr><tr><td align="center">str.islower()</td><td align="center">所有字符都是小写</td></tr><tr><td align="center">str.isupper()</td><td align="center">所有字符都是大写</td></tr><tr><td align="center">str.istitle()</td><td align="center">所有字符都是首字母大写</td></tr><tr><td align="center">str.isspace()</td><td align="center">所有字符都是空白字符(\n、\t等)</td></tr></tbody></table><h2 id="数据的处理"><a href="#数据的处理" class="headerlink" title="数据的处理"></a>数据的处理</h2><p>字符串拼接的几种方式</p><p>1.使用str.join()方法进行拼接字符串</p><p>2.直接拼接</p><p>3.使用格式化字符串进行拼接</p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>元字符：具有特殊意义的专用字符，例如”^”和”$”分别表示匹配的开始与结束</p><table><thead><tr><th align="center">元字符</th><th align="center">描述说明</th><th align="center">举例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">.</td><td align="center">匹配任意字符(除了\n)</td><td align="center">‘p\nytho\tn’</td><td align="center">p、y、t、h、o、\t、n</td></tr><tr><td align="center">\w</td><td align="center">匹配字母、数字、下划线</td><td align="center">‘python\n123’</td><td align="center">p、y、t、h、o、n、1、2、3</td></tr><tr><td align="center">\W</td><td align="center">匹配非字母、数字、下划线</td><td align="center">‘python\n123’</td><td align="center">\n</td></tr><tr><td align="center">\s</td><td align="center">匹配任意空白字符</td><td align="center">‘python\t123’</td><td align="center">\t</td></tr><tr><td align="center">\S</td><td align="center">匹配任意非空白字符</td><td align="center">‘python\t123’</td><td align="center">p、y、t、h、o、n、1、2、3</td></tr><tr><td align="center">\d</td><td align="center">匹配任意十进制数</td><td align="center">‘python\t123’</td><td align="center">1、2、3</td></tr></tbody></table><p>限定符：用于限定匹配的次数</p><table><thead><tr><th align="center">限定符</th><th align="center">描述说明</th><th align="center">举例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">？</td><td align="center">匹配前面的字符0或1次</td><td align="center">colou?r</td><td align="center">可以匹配color或colour</td></tr><tr><td align="center">+</td><td align="center">匹配前面的字符1次或多次</td><td align="center">colou+r</td><td align="center">可以匹配colour或colouu…r</td></tr><tr><td align="center">*</td><td align="center">匹配前面的字符0或多次</td><td align="center">colou*r</td><td align="center">可以匹配color或colouu…r</td></tr><tr><td align="center">{n}</td><td align="center">匹配前面的字符n次</td><td align="center">colou{2}r</td><td align="center">可以匹配colouur</td></tr><tr><td align="center">{n,}</td><td align="center">匹配前面的字符最少n次</td><td align="center">colou{2,}r</td><td align="center">可以匹配colouur或colouuuu….r</td></tr><tr><td align="center">{n,m}</td><td align="center">匹配前面的字符最少n次，最多m次</td><td align="center">colou{2,4}r</td><td align="center">可以匹配colouur或colouuuur或colouuur</td></tr></tbody></table><p>其他字符</p><table><thead><tr><th align="center">其他字符</th><th align="center">描述说明</th><th align="center">举例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">区间字符[]</td><td align="center">匹配[]中所指定的字符</td><td align="center">[.?!],[0-9]</td><td align="center">匹配标点符号，点、问号、感叹号。匹配0、1、2、3、4、5、6、7、8、9</td></tr><tr><td align="center">排除字符^</td><td align="center">匹配不在[]中指定的字符</td><td align="center">[^0-9]</td><td align="center">匹配除了0、1、2、3、4、5、6、7、8、9的字符</td></tr><tr><td align="center">选择字符|</td><td align="center">用于匹配|左右的任意字符</td><td align="center">\d{18}|\d{15}</td><td align="center">匹配15位身份证或18位身份证</td></tr><tr><td align="center">转义字符</td><td align="center">同Python中的转义字符</td><td align="center">\.</td><td align="center">将.作为普通字符使用</td></tr><tr><td align="center">[\u4e00-\u9fa5]</td><td align="center">匹配任意一个汉字</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">分组{}</td><td align="center">改变限定符的作用</td><td align="center">six|fourth,(six|four)th</td><td align="center">匹配six或fourth，sixth或fourth</td></tr></tbody></table><h2 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h2><p>re模块：Python中内置的模块，用于实现Python中的正则表达式</p><table><thead><tr><th align="center">函数</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">re.match(pattern,string,flags&#x3D;0)</td><td align="center">用于从字符串的开始位置进行匹配，如果起始位置匹配成功，结果为Match对象，否则结果为None</td></tr><tr><td align="center">re.search(pattern,string,flags&#x3D;0)</td><td align="center">用于在整个字符串中搜索第一个匹配的值，如果匹配成功，结果为Match对象，否则结果为None</td></tr><tr><td align="center">re.findall(pattern,string,flags&#x3D;0)</td><td align="center">用于在整个字符串搜索所有符合正则表达式的值，结果为一个列表类型</td></tr><tr><td align="center">re.sub(pattern,repl,string,count,flags&#x3D;0)</td><td align="center">用于实现对字符串中指定子串的替换</td></tr><tr><td align="center">re.split(pattern,string,maxsplit,flags&#x3D;0)</td><td align="center">与字符串中的split()方法相同，都是分隔字符串</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python组合数据类型</title>
    <link href="/2023/12/14/Python%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2023/12/14/Python%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Python组合数据类型"><a href="#Python组合数据类型" class="headerlink" title="Python组合数据类型"></a>Python组合数据类型</h1><h2 id="序列和索引"><a href="#序列和索引" class="headerlink" title="序列和索引"></a>序列和索引</h2><p>序列是一个用于存储多个值的连续空间，每个值都对应一个整数编号，称为索引。索引分为正向递增索引与反向递减索引</p><p>切片操作的语法结构：</p><p>序列[start: end: step], start为切片开始的索引(包含)，end为切片结束的索引(不包含)，step为步长(默认为1)。省略开始位置则默认从0开始，省略结束位置则默认到序列的最后一个元素（包含最后一个）</p><h3 id="序列的相关操作"><a href="#序列的相关操作" class="headerlink" title="序列的相关操作"></a>序列的相关操作</h3><table><thead><tr><th align="center">操作符&#x2F;函数</th><th align="center">描述说明</th></tr></thead><tbody><tr><td align="center">x in s</td><td align="center">如果x是s的元素，结果为True，否则结果为False</td></tr><tr><td align="center">x not in s</td><td align="center">如果x不是s的元素，结果为True，否则结果为False</td></tr><tr><td align="center">len(s)</td><td align="center">序列s中的元素的个数</td></tr><tr><td align="center">max(s)</td><td align="center">序列s中元素的最大值</td></tr><tr><td align="center">min(s)</td><td align="center">序列s中元素的最小值</td></tr><tr><td align="center">s.index(x)</td><td align="center">序列s中元素x第一次出现的位置</td></tr><tr><td align="center">s.count(x)</td><td align="center">序列s中元素x出现的总次数</td></tr></tbody></table><h2 id="列表类型"><a href="#列表类型" class="headerlink" title="列表类型"></a>列表类型</h2><p>列表的定义：</p><p>1.是指一系列的按特定顺序排列的元素组成</p><p>2.是Python中内置的<strong>可变序列</strong></p><p>3.在Python中使用[]定义列表，元素与元素之间使用英文逗号分隔</p><p>4.列表中的元素可以是任意的数据类型</p><p>列表的创建方式有两种，一是使用[]直接创建列表，二是使用内置函数list()创建列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>列表名=[element1,element2,...elementN]<br><span class="hljs-number">2.</span>列表名=<span class="hljs-built_in">list</span>(序列)<br><span class="hljs-number">3.</span>列表的删除 <span class="hljs-keyword">del</span> 列表名<br></code></pre></td></tr></table></figure><p>enumerate函数的使用语法结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> index,item <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-built_in">list</span>):<span class="hljs-comment">#index是序号不是索引值，可以单独设置(list,start=n)</span><br>    <span class="hljs-built_in">print</span>(index,item)<br></code></pre></td></tr></table></figure><h3 id="列表的相关操作方法"><a href="#列表的相关操作方法" class="headerlink" title="列表的相关操作方法"></a>列表的相关操作方法</h3><table><thead><tr><th align="center">列表的方法</th><th align="center">描述说明</th></tr></thead><tbody><tr><td align="center">list.append(x)</td><td align="center">在列表list最后增加一个元素</td></tr><tr><td align="center">list.insert(index,x)</td><td align="center">在列表list的index位插入一个元素</td></tr><tr><td align="center">list.clear()</td><td align="center">清除列表list内的所有元素</td></tr><tr><td align="center">list.pop(index)</td><td align="center">将列表list中第index位的元素取出，并在列表中删除</td></tr><tr><td align="center">list.remove(x)</td><td align="center">将列表list中出现的第一个元素x删除</td></tr><tr><td align="center">list.reverse(x)</td><td align="center">将列表list中的所有元素反转</td></tr><tr><td align="center">list.copy()</td><td align="center">拷贝列表中的所有元素，生成一个新的列表</td></tr></tbody></table><p>列表的排序方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>.sort(key=<span class="hljs-literal">None</span>,reverse=<span class="hljs-literal">False</span>)<span class="hljs-comment">#其中key表示排序的规则，reverse表示排序方式，默认为false，表示升序</span><br><span class="hljs-comment">############</span><br><span class="hljs-built_in">sorted</span>(iterable,key=<span class="hljs-literal">None</span>,reverse=<span class="hljs-literal">False</span>)<span class="hljs-comment">#iterable表示排序的对象</span><br></code></pre></td></tr></table></figure><p>列表生成式的语法结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>=[expression <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>]<br><span class="hljs-comment">####################</span><br><span class="hljs-built_in">list</span>=[expression <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> rang <span class="hljs-keyword">if</span> condition]<br></code></pre></td></tr></table></figure><p>二维列表：表格数据</p><p>二维列表的遍历：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-keyword">for</span> <span class="hljs-built_in">row</span> <span class="hljs-keyword">in</span> 二维列表:<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">row</span>:<br>pass<br></code></pre></td></tr></table></figure><h1 id="元组类型"><a href="#元组类型" class="headerlink" title="元组类型"></a>元组类型</h1><p>元组的定义：</p><p>1.是Python中内置的不可变序列</p><p>2.在Python中使用()定义元组，元素与元素之间使用英文逗号分隔</p><p>3.元组中只有一个元素时逗号也不能省略</p><p>元组的创建方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">元组名=(element1,element2...elementN)<span class="hljs-comment">#使用()直接创建元组</span><br><span class="hljs-comment">###############</span><br>元组名=<span class="hljs-built_in">tuple</span>(序列)<span class="hljs-comment">#使用内置函数创建元组</span><br><span class="hljs-comment">###########</span><br><span class="hljs-keyword">del</span> 元组名<span class="hljs-comment">#删除元组</span><br></code></pre></td></tr></table></figure><h3 id="元组与列表的区别"><a href="#元组与列表的区别" class="headerlink" title="元组与列表的区别"></a>元组与列表的区别</h3><table><thead><tr><th align="center">元组</th><th align="center">列表</th></tr></thead><tbody><tr><td align="center">不可变序列</td><td align="center">可变序列</td></tr><tr><td align="center">无法实现添加、删除和修改元素等操作</td><td align="center">append()、insert()、remove()、pop()、等方法实现添加和删除列表元素</td></tr><tr><td align="center">支持切片访问元素、不支持修改操作</td><td align="center">支持切片访问和修改列表中的元素</td></tr><tr><td align="center">访问和处理速度快</td><td align="center">访问和处理速度慢</td></tr><tr><td align="center">可以作为字典的键</td><td align="center">不能作为字典的键</td></tr></tbody></table><h1 id="字典类型"><a href="#字典类型" class="headerlink" title="字典类型"></a>字典类型</h1><p>字典类型的定义：</p><p>1.根据一个信息查找另外一个信息的方式构成了”键值对“，它表示索引用的键和对应的值构成的成对关系</p><p>2.它也是可变数据类型，并且是无序的</p><p>3.字典的键必须是不可变数据类型</p><p>4.字典中键必须唯一，但是值可以重复</p><p>字典的创建方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">d=&#123;key1:value1,key2:value2.....&#125;<span class="hljs-comment">#使用&#123;&#125;直接创建字典</span><br><span class="hljs-comment">##################</span><br><span class="hljs-built_in">zip</span>(list1,list2)<span class="hljs-comment">#通过映射函数创建字典</span><br><span class="hljs-comment">#############</span><br><span class="hljs-built_in">dict</span>(key1:value1,key2:value2..........)<span class="hljs-comment">#使用内置函数dict创建字典</span><br></code></pre></td></tr></table></figure><p><strong>注意！</strong></p><p>字典中的key是无序的，Python3.5及其之前版本的字典的key在输出时无序，但是在Python版本3.6之后Python解释器进行了处理，所以会出现输出的顺序与添加的顺序”一致”</p><p>字典元素的取值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">d[key]或d.get(key)<br></code></pre></td></tr></table></figure><p>字典元素的遍历：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> d.items():<span class="hljs-comment">#遍历出key与value的元组</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-comment">#########################</span><br><span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> d.items():<span class="hljs-comment">#分别遍历出key和value</span><br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h2 id="字典的相关操作方法"><a href="#字典的相关操作方法" class="headerlink" title="字典的相关操作方法"></a>字典的相关操作方法</h2><table><thead><tr><th align="center">字典的方法</th><th align="center">描述说明</th></tr></thead><tbody><tr><td align="center">d.keys()</td><td align="center">获取所有的key数据</td></tr><tr><td align="center">d.values()</td><td align="center">获取所有的value数据</td></tr><tr><td align="center">d.pop(key.default)</td><td align="center">key存在获取相应的value,同时删除key_value对，否则获取默认值</td></tr><tr><td align="center">d.popitem()</td><td align="center">随机从字典中取出一个key-value对，结果为元组类型，同时将该key-value从字典中删除</td></tr><tr><td align="center">d.clear()</td><td align="center">清空字典中所有的key-value对</td></tr></tbody></table><p>字典生成式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">d=&#123;key:value <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>&#125;<br><span class="hljs-comment">###############################</span><br>d=&#123;key:value <span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(list1,list2)&#125;<br></code></pre></td></tr></table></figure><h1 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h1><p>集合的定义：</p><p>1.Python中的集合与数学中集合的概念一致</p><p>2.Python中的集合是一个无序的不重复元素序列</p><p>3.集合中只能存储不可变数据类型</p><p>4.在Python中集合使用{}定义</p><p>5.与列表、字典一样，都是Python中的可变数据类型</p><p>集合的创建方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s=&#123;element1,element2.....elementN&#125;直接使用&#123;&#125;创捷集合<br><span class="hljs-comment">###############################</span><br>s=<span class="hljs-built_in">set</span>(可迭代对象)<span class="hljs-comment">#使用内置函数set()创建集合</span><br><span class="hljs-comment">##################</span><br><span class="hljs-keyword">del</span> s<br></code></pre></td></tr></table></figure><p>集合的操作符</p><p>交集(A&amp;B)、并集(A|B)、差集(A-B)、补集(A^B)</p><h3 id="集合的相关操作方法"><a href="#集合的相关操作方法" class="headerlink" title="集合的相关操作方法"></a>集合的相关操作方法</h3><table><thead><tr><th align="center">集合的方法</th><th align="center">描述说明</th></tr></thead><tbody><tr><td align="center">s.add(x)</td><td align="center">如果x不在集合s中，则将x添加到集合s</td></tr><tr><td align="center">s.remove(x)</td><td align="center">如果x在集合中，将其删除，如果不在集合中，程序报错</td></tr><tr><td align="center">s.clear()</td><td align="center">清除集合中所有元素</td></tr></tbody></table><h3 id="列表、元组、字典、集合的区别"><a href="#列表、元组、字典、集合的区别" class="headerlink" title="列表、元组、字典、集合的区别"></a>列表、元组、字典、集合的区别</h3><table><thead><tr><th align="center">数据类型</th><th align="center">序列类型</th><th align="center">元素是否可重复</th><th align="center">是否有序</th><th align="center">定义符号</th></tr></thead><tbody><tr><td align="center">列表list</td><td align="center">可变序列</td><td align="center">可重复</td><td align="center">有序</td><td align="center">[]</td></tr><tr><td align="center">元组tuple</td><td align="center">不可变序列</td><td align="center">可重复</td><td align="center">有序</td><td align="center">()</td></tr><tr><td align="center">字典dict</td><td align="center">可变序列</td><td align="center">key不可重复，value不可重复</td><td align="center">无序</td><td align="center">{key:value}</td></tr><tr><td align="center">集合set</td><td align="center">可变序列</td><td align="center">不可重复</td><td align="center">无序</td><td align="center">{}</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python程序流程控制</title>
    <link href="/2023/12/09/Python%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <url>/2023/12/09/Python%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Python程序流程控制"><a href="#Python程序流程控制" class="headerlink" title="Python程序流程控制"></a>Python程序流程控制</h1><h2 id="程序描述方式"><a href="#程序描述方式" class="headerlink" title="程序描述方式"></a>程序描述方式</h2><p>常用的程序描述方式有三种，分别是自然语言、流程图、伪代码</p><p>自然语言：就是使用人类语言，直接描述程序</p><p>流程图：是用一系列图形、流程线和文字说明描述程序的基本操作和控制流程，主要适用于较短的算法</p><p>伪代码：是介于自然语言和编程语言之间的一种算法描述语言，如果程序比较小可以直接使用代码描述</p><h2 id="程序的组织结构"><a href="#程序的组织结构" class="headerlink" title="程序的组织结构"></a>程序的组织结构</h2><p>程序的组织结构分为：顺序结构、选择&#x2F;分支结构以及循环结构</p><p>顺序结构：按程序语句的自然顺序，从上到下、依次执行每条语句的程序。一般有赋值、输入输出语句等</p><p>选择&#x2F;分支结构：也称为分支结构，是按照条件选择执行不同的代码段。</p><p>单分支结构语句规范：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 表达式<span class="hljs-number">1</span>:<br>语句块<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>双分支结构语句规范：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">if</span> 表达式<span class="hljs-number">1</span>：<br>语句块<span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>语句块<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>多分支结构语句规范：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 表达式<span class="hljs-number">1</span>:<br>    语句块<span class="hljs-number">1</span><br><span class="hljs-keyword">elif</span> 表达式<span class="hljs-number">2</span>:<br>    语句块<span class="hljs-number">2</span><br><span class="hljs-keyword">elif</span> 表达式n:<br>    语句块n<br><span class="hljs-keyword">else</span>:<br>    语句块n+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>单分支结构、双分支结构和多分支结构在实际开发中是可以互相嵌套使用的、内层的分支结构将作为外层的分支结构的语句块使用</p><p>循环结构：</p><p>在Python中循环结构分两类，一类是遍历循环结构for，一类是无限循环结构while</p><p>遍历循环结构for的语句结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> 循环变量 <span class="hljs-keyword">in</span>遍历对象:<br>    语句块<br></code></pre></td></tr></table></figure><p>for…else…结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> 循环变量 <span class="hljs-keyword">in</span> 遍历对象:<br>    语句块<span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>；<br>语句块<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>无限循环while结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 表达式:<br>    语句块<br></code></pre></td></tr></table></figure><p>while…else…结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 表达式:<br>    语句块<span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    语句块<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>while循环的四个步骤：</p><p>1.初始化变量</p><p>2.条件判断</p><p>3.语句块</p><p>4.改变变量</p><p>循环结构也可以互相嵌套，在一个循环结构中嵌套另外一个完整的循环结构就称为嵌套循环</p><h2 id="程序跳转语句"><a href="#程序跳转语句" class="headerlink" title="程序跳转语句"></a>程序跳转语句</h2><p>break程序跳转语句用于跳出循环结构，通常与if一起搭配使用</p><p>break程序跳转语句的语法结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 表达式<span class="hljs-number">1</span>:<br>    执行代码<br>    <span class="hljs-keyword">if</span> 表达式<span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>continue的作用是用于跳过本次循环的后续代码，而继续执行下一次循环操作，continue在循环中通常也是与if一起搭配使用</p><p>continue程序跳转语句的语法结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 表达式<span class="hljs-number">1</span>:<br>    执行代码<br>    <span class="hljs-keyword">if</span> 表达式<span class="hljs-number">2</span>:<br>       <span class="hljs-keyword">continue</span><br><span class="hljs-comment">###################</span><br><span class="hljs-keyword">for</span> 循环变量 <span class="hljs-keyword">in</span> 遍历对象:<br>    执行代码<br>    <span class="hljs-keyword">if</span> 表达式:<br>        <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p>空语句pass</p><p>pass是Python中的保留字，在语法结构中只起到占位符的作用，使语法结构完整，不报错。一般可用在if、for、while、函数的定义、类的定义中</p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python数据类型</title>
    <link href="/2023/12/05/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2023/12/05/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Python数据类型"><a href="#Python数据类型" class="headerlink" title="Python数据类型"></a>Python数据类型</h1><p>1.整数类型：没有小数部分的数值，包含正整数、负整数和零。可以使用十进制、二进制（0b或0B)、八进制(0o或0O)、十六进制(0x或0X）表示</p><p>2.浮点类型：带有小数点的数值，由整数部分和小数部分组成。注意：两个浮点数进行运算时有概率会出现不确定的位数问题，可以使用round保留小数。Python中的复数与数学中的复数形式一致,都由实部和虚部组成。在Python中使用.real表示实部，使用.imag表示虚部</p><p>3.字符串类型：连续的字符序列，可以表示计算机所能识别的一切字符。字符串的界定符：单引号、双引号、三引号。</p><table><thead><tr><th align="center">转义字符</th><th align="center">描述说明</th></tr></thead><tbody><tr><td align="center">\n</td><td align="center">换行符</td></tr><tr><td align="center">\t</td><td align="center">水平制表位，用于横向跳到下一个制表位,一个制表位长度为8</td></tr><tr><td align="center">\“</td><td align="center">双引号</td></tr><tr><td align="center">\‘</td><td align="center">单引号</td></tr><tr><td align="center">\</td><td align="center">一个反斜杠</td></tr></tbody></table><p>字符串又被称为有序的字符序列，对字符串中的某个字符的检索称为索引</p><p>对字符串中某个字串或区间的检索称为切片，切片的语法结构为：字符串或字符串变量[N:M]</p><p>常用的字符串操作</p><table><thead><tr><th>操作符</th><th>描述说明</th></tr></thead><tbody><tr><td>x+y</td><td>将字符串x与y连接起来</td></tr><tr><td>x * n或n * x</td><td>复制n次字符串x</td></tr><tr><td>x in s</td><td>如果x是s的子串，结果为True，否则结果为False</td></tr></tbody></table><p>4.布尔类型：用来表示”真“或者”假“值的数据类型，在Python中使用True或False表示布尔类型的值，True表示整数1，Flase表示整数0。非零的整数的布尔值都为True，所有非空字符串的布尔值也为True。</p><p>布尔值为False的情况如下</p><p>1.False或者是None</p><p>2.数值中的0，包含0.0，虚数0</p><p>3.空序列，包含空格字符串、空元组、空列表、空字典、空集合</p><p>4.自定义对象的实例 该对象的”bool()”方法返回False或”len()”方法返回0</p><h1 id="数据类型的转换"><a href="#数据类型的转换" class="headerlink" title="数据类型的转换"></a>数据类型的转换</h1><table><thead><tr><th align="center">函数</th><th>描述说明</th></tr></thead><tbody><tr><td align="center">int(x)</td><td>将x转换为整数类型</td></tr><tr><td align="center">float(x)</td><td>将x转换为浮点类型</td></tr><tr><td align="center">str(x)</td><td>将x转化为字符串类型</td></tr><tr><td align="center">chr(x)</td><td>将x转换为一个字符</td></tr><tr><td align="center">ord(x)</td><td>将一个字符串x转换为其对应的整数值</td></tr><tr><td align="center">hex(x)</td><td>将一个整数x转换为一个十六进制字符串</td></tr><tr><td align="center">oct(x)</td><td>将一个整数x转换为一个八进制字符串</td></tr><tr><td align="center">bin(x)</td><td>将一个整数x转换为一个二进制字符串</td></tr></tbody></table><h1 id="eval函数"><a href="#eval函数" class="headerlink" title="eval函数"></a>eval函数</h1><p>eval函数：Python当中的一个内置函数，用于去掉字符串最外侧的引号，并按照Python语句方式执行去掉引号的字符串。eval()函数经常与input()函数一起使用</p><p>eval的语法格式：变量&#x3D;eval(字符串)</p><h1 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h1><p>算术运算符：用于处理四则运算的符号</p><table><thead><tr><th align="center">运算符</th><th align="center">描述说明</th><th align="center">示例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加法</td><td align="center">1+1</td><td align="center">2</td></tr><tr><td align="center">-</td><td align="center">减法</td><td align="center">1-1</td><td align="center">0</td></tr><tr><td align="center">*</td><td align="center">乘法</td><td align="center">3*3</td><td align="center">9</td></tr><tr><td align="center">&#x2F;</td><td align="center">除法</td><td align="center">10&#x2F;2</td><td align="center">5</td></tr><tr><td align="center">&#x2F;&#x2F;</td><td align="center">整除</td><td align="center">10&#x2F;&#x2F;3</td><td align="center">3</td></tr><tr><td align="center">%</td><td align="center">取余</td><td align="center">10%3</td><td align="center">1</td></tr><tr><td align="center">**</td><td align="center">幂运算</td><td align="center">2**4</td><td align="center">16</td></tr></tbody></table><p>算术运算符的优先级由高到低为：</p><p>第一级：**</p><p>第二级：* &#x2F; &#x2F;&#x2F; %</p><p>第三级：+  -</p><h1 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h1><table><thead><tr><th align="center">运算符</th><th align="center">描述说明</th><th align="center">示例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">&#x3D;</td><td align="center">简单的赋值运算</td><td align="center">x&#x3D;y</td><td align="center">x&#x3D;y</td></tr><tr><td align="center">+&#x3D;</td><td align="center">加赋值</td><td align="center">x+&#x3D;y</td><td align="center">x&#x3D;x+y</td></tr><tr><td align="center">-&#x3D;</td><td align="center">减赋值</td><td align="center">x-&#x3D;y</td><td align="center">x&#x3D;x-y</td></tr><tr><td align="center">*&#x3D;</td><td align="center">乘赋值</td><td align="center">x*&#x3D;y</td><td align="center">x&#x3D;x*y</td></tr><tr><td align="center">&#x2F;&#x3D;</td><td align="center">除赋值</td><td align="center">x&#x2F;&#x3D;y</td><td align="center">x&#x3D;x&#x2F;y</td></tr><tr><td align="center">%&#x3D;</td><td align="center">取余赋值</td><td align="center">x%&#x3D;y</td><td align="center">x&#x3D;x%y</td></tr><tr><td align="center">**&#x3D;</td><td align="center">幂赋值</td><td align="center">x**&#x3D;y</td><td align="center">x&#x3D;x**y</td></tr><tr><td align="center">&#x2F;&#x2F;&#x3D;</td><td align="center">整除赋值</td><td align="center">x&#x2F;&#x2F;&#x3D;y</td><td align="center">x&#x3D;x&#x2F;&#x2F;y</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Python链式赋值</span><br>a=b=c=<span class="hljs-number">100</span><br><span class="hljs-built_in">print</span>(a,b,c)<br><span class="hljs-comment">#Python系列解包赋值</span><br>a,b=<span class="hljs-number">10</span>,<span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(a,b)<br><span class="hljs-comment">#Python交换两个变量的值</span><br>a,b=b,a<br><span class="hljs-built_in">print</span>(a,b)<br></code></pre></td></tr></table></figure><h1 id="比较运算符-关系运算符"><a href="#比较运算符-关系运算符" class="headerlink" title="比较运算符(关系运算符)"></a>比较运算符(关系运算符)</h1><table><thead><tr><th align="center">运算符</th><th align="center">描述说明</th><th align="center">示例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">&gt;</td><td align="center">大于</td><td align="center">98&gt;90</td><td align="center">True</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td><td align="center">98&lt;90</td><td align="center">False</td></tr><tr><td align="center">&#x3D;&#x3D;</td><td align="center">等于</td><td align="center">98&#x3D;&#x3D;90</td><td align="center">False</td></tr><tr><td align="center">!&#x3D;</td><td align="center">不等于</td><td align="center">98!&#x3D;90</td><td align="center">True</td></tr><tr><td align="center">&gt;&#x3D;</td><td align="center">大于等于</td><td align="center">98&gt;&#x3D;90</td><td align="center">True</td></tr><tr><td align="center">&lt;&#x3D;</td><td align="center">小于等于</td><td align="center">98&lt;&#x3D;90</td><td align="center">False</td></tr></tbody></table><h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><table><thead><tr><th align="center">运算符</th><th align="center">描述说明</th><th align="center">用法</th><th align="center">结合方向</th></tr></thead><tbody><tr><td align="center">and</td><td align="center">逻辑与</td><td align="center">表达式1and表达式2</td><td align="center">从左到右</td></tr><tr><td align="center">or</td><td align="center">逻辑或</td><td align="center">表达式1or表达式2</td><td align="center">从左到右</td></tr><tr><td align="center">not</td><td align="center">逻辑非</td><td align="center">not表达式</td><td align="center">从右到左</td></tr></tbody></table><table><thead><tr><th align="center">表达式1</th><th align="center">表达式2</th><th align="center">表达式1and表达式2</th><th align="center">表达式1or表达式2</th><th align="center">not表达式1</th></tr></thead><tbody><tr><td align="center">True</td><td align="center">True</td><td align="center">True</td><td align="center">True</td><td align="center">False</td></tr><tr><td align="center">True</td><td align="center">False</td><td align="center">False</td><td align="center">True</td><td align="center">False</td></tr><tr><td align="center">False</td><td align="center">False</td><td align="center">False</td><td align="center">False</td><td align="center">True</td></tr><tr><td align="center">False</td><td align="center">True</td><td align="center">False</td><td align="center">True</td><td align="center">True</td></tr></tbody></table><h1 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h1><p>把数字看作二进制数来进行计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#按位与</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;按位与&quot;</span>,<span class="hljs-number">12</span>&amp;<span class="hljs-number">8</span>)<br><span class="hljs-comment">#按位或</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;按位或&quot;</span>,<span class="hljs-number">4</span>|<span class="hljs-number">8</span>)<br><span class="hljs-comment">#按位异或</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;按位异或&quot;</span>,<span class="hljs-number">12</span>^<span class="hljs-number">22</span>)<br><span class="hljs-comment">#按位取反</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;按位取反&quot;</span>,~<span class="hljs-number">8</span>)<br><span class="hljs-comment">#左移位</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;左移位&quot;</span>,<span class="hljs-number">2</span>&lt;&lt;<span class="hljs-number">2</span>)<span class="hljs-comment">#8 表示2向左移动两位相当于2*2*2=8</span><br><span class="hljs-comment">#右移位</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;右移位&quot;</span>,<span class="hljs-number">8</span>&gt;&gt;<span class="hljs-number">2</span>)<span class="hljs-comment">#2 向右移动两位相当于8/2=4 4/2=2</span><br></code></pre></td></tr></table></figure><p>运算符的优先级</p><table><thead><tr><th align="center">运算符</th><th align="center">描述说明</th></tr></thead><tbody><tr><td align="center">**</td><td align="center">幂运算</td></tr><tr><td align="center">~、+、-</td><td align="center">取反、正号、负号</td></tr><tr><td align="center">*、&#x2F;、%、&#x2F;&#x2F;</td><td align="center">算术运算符</td></tr><tr><td align="center">+、-</td><td align="center">算术运算符</td></tr><tr><td align="center">&lt;&lt;、&gt;&gt;</td><td align="center">位运算中的左移位与右移位</td></tr><tr><td align="center">&amp;</td><td align="center">位运算中的按位与</td></tr><tr><td align="center">^</td><td align="center">位运算中的异或</td></tr><tr><td align="center">|</td><td align="center">位运算中的按位或</td></tr><tr><td align="center">&lt;、&lt;&#x3D;、&gt;、&gt;&#x3D;、!&#x3D;、&#x3D;&#x3D;</td><td align="center">比较运算符</td></tr><tr><td align="center">&#x3D;</td><td align="center">赋值运算符</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python语法规范</title>
    <link href="/2023/11/30/Python%E8%AF%AD%E6%B3%95%E8%A7%84%E8%8C%83/"/>
    <url>/2023/11/30/Python%E8%AF%AD%E6%B3%95%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h2 id="Python注释方法"><a href="#Python注释方法" class="headerlink" title="Python注释方法"></a>Python注释方法</h2><p>1.使用#在目标代码行实现单行注释</p><p>2.使用单双引号在代码中实现多行注释</p><p>3.中文文档声明注释</p><h2 id="Python代码缩进"><a href="#Python代码缩进" class="headerlink" title="Python代码缩进"></a>Python代码缩进</h2><p>指每一行语句开始前的空白区域</p><p>用来表示Python程序间的包含和层级关系</p><p>类定义，函数定义，流程控制语句以及异常处理语句等行尾的冒号和下一行的缩进表示一个代码块的开始，而缩进结束，则表示一个代码块的结束</p><p>一般来说4个空格为一个缩进量</p><h2 id="Python保留字与标识符"><a href="#Python保留字与标识符" class="headerlink" title="Python保留字与标识符"></a>Python保留字与标识符</h2><p>保留字：指在Python中被赋予特定意义的一些单词，在开发程序时，不可以把这些保留字作为变量，函数，类，模块和其他对象的名称来使用，保留字严格区分大小写。开发中可以使用keyword这个第三方库查询具体的保留字</p><p>标识符：可以是字符（英文，中文）、下划线和数字，并且第一个字符不能是数字。不能使用Python中的保留字。标识符严格区分大小写。以下划线开头的标识符具有特殊意义，一般应避免使用相似的标识符。通常不建议使用中文作为标识符。</p><p>标识符的命名规范：</p><p>1.模块名尽量短小，并且全部使用小写字母，可以使用下划线分割多个字母 eg: user_infor</p><p>2.包名尽量短小，并且全部使用小写字母，不推荐使用下划线 eg: register.func</p><p>3.类名采用单词首字母大写的形式 eg: MyClass</p><p>4.模块内部的类采用“_”+Pascal风格的类名组成 eg: _InnerMyClass</p><p>5.函数、类的属性和方法的命名，全部使用小写字母，多个字母之间使用下划线分隔</p><p>6.常量命名时采用全部大写字母，可以使用下划线</p><p>7.使用单下划线“_”开头的模块变量或函数是受保护的，在使用”from xxx import xxx”语句从模块中导入时，这些模块变量或函数不能被导入</p><p>8.使用双下划线”__”开头的实例变量或方法是类私有的</p><p>9.以双下划线开头和结尾的是Python的专用标识</p><h2 id="Python变量与常量"><a href="#Python变量与常量" class="headerlink" title="Python变量与常量"></a>Python变量与常量</h2><p>变量的语法结构：变量名&#x3D;value    eg: user&#x3D;jay</p><p>变量的命名规则：</p><p>1.变量名必须是一个有效的标识符</p><p>2.变量名不能使用Python中的保留字</p><p>3.慎用类似O、I等大小写一样的字母</p><p>4.选择有意义的单词作为变量名</p><p>常量的命名规范：全部使用大写字母，一般不建议修改它的值</p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习前言</title>
    <link href="/2023/11/23/Python%E5%AD%A6%E4%B9%A0%E5%89%8D%E8%A8%80/"/>
    <url>/2023/11/23/Python%E5%AD%A6%E4%B9%A0%E5%89%8D%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="程序设计语言"><a href="#程序设计语言" class="headerlink" title="程序设计语言"></a>程序设计语言</h1><p>程序设计语言一般分为三种，分别是：机器语言，汇编语言以及高级语言。</p><p>机器语言：是一种二进制语言 ，能够直接使用二进制代码表达指令，是计算机硬件可以直接识别和执行的程序设计语言</p><p>汇编语言：使用方便记符与机器语言中的指令一一对应</p><p>高级语言：接近自然语言的一种计算机程序设计语言,Python，Java都是高级语言</p><p>采用编译方式运行的语言叫做静态语言，例如Java，采用解释方式运行的语言叫做脚本语言，例如Python，PHP等</p><h1 id="Python语言的特点"><a href="#Python语言的特点" class="headerlink" title="Python语言的特点"></a>Python语言的特点</h1><p>1.编译简单，语法简洁</p><p>2.粘性拓展，开源理念</p><p>3.通用灵活，强制可读</p><p>4.支持中文，模式多样</p><p>5.平台无关，类库丰富</p><h1 id="Python的应用领域"><a href="#Python的应用领域" class="headerlink" title="Python的应用领域"></a>Python的应用领域</h1><p>1.Web开发：Django,Flask,Tornado等后端框架</p><p>2.数据分析与科学计算：Numpy.Pandas,Matplotlib等第三方库</p><p>3.人工智能和机器学习：Tensorflow,PyTorch,Keras等第三方库</p><p>4.自动化测试和运维：Selenium库在自动化测试和运维领域有着举足轻重的作用</p><p>5.网络爬虫游戏开发</p><h1 id="python开发工具"><a href="#python开发工具" class="headerlink" title="python开发工具"></a>python开发工具</h1><p>许多第三方开发工具，例如Pycharm,Anaconda等</p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你听得到</title>
    <link href="/2023/11/20/%E4%BD%A0%E5%90%AC%E5%BE%97%E5%88%B0/"/>
    <url>/2023/11/20/%E4%BD%A0%E5%90%AC%E5%BE%97%E5%88%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="你听得到"><a href="#你听得到" class="headerlink" title="你听得到"></a>你听得到</h1><p>有谁能比我知道</p><p>你的温柔像羽毛</p><p>秘密躺在我怀抱</p><p>只有你能听得到</p><p>还有没有人知道</p><p>你的微笑像拥抱</p><p>多想藏着你的好</p><p>只有我看得到</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
